{"version":3,"sources":["../../../src/actions/validation/checkRegisterFields.js"],"names":[],"mappings":";;;;;;;;;;;0BAI2B,iBAAiB;;AAErC,SAAS,mBAAmB,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;AAC/C,QAAI,MAAM,GAAG,EAAE;QACX,cAAc,GAAG;AACb,aAAK,EAAE,WAAW;AAClB,YAAI,EAAE,8BAA8B;KACvC;QACD,eAAe,GAAG;AACd,aAAK,EAAE,YAAY;AACnB,YAAI,EAAE,6BAA6B;KACtC;QACD,kBAAkB,GAAG;AACjB,aAAK,EAAE,uBAAuB;AAC9B,YAAI,EAAE,0BAA0B;KACnC,CAAC;;AAEN,QAAI,SAAS,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK;AACrC,UAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CACjB,IAAI,CAAC;AACF,eAAG,EAAE,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAC,EACtB,EAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAC,CAAC;SAClC,CAAC,CACD,OAAO,CAAC,UAAC,GAAG,EAAE,OAAO,EAAK;AACvB,gBAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;uBAAI,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS;aAAA,CAAC,CAAC,MAAM;gBAC5E,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;uBAAI,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,UAAU;aAAA,CAAC,CAAC,MAAM,CAAC;;AAEpF,gBAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AACtB,AAAC,0BAAU,GAAG,CAAC,IAAK,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAChD,AAAC,2BAAW,GAAG,CAAC,IAAK,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aACrD;;AAED,AAAC,gBAAI,CAAC,aAAa,KAAK,IAAI,CAAC,qBAAqB,IAAK,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;;AAEvF,mBAAO,EAAE,CAAC;SACb,CAAC,CAAC;KACV,CAAC,CAAC;;AAEH,aAAS,CAAC,IAAI,CAAC,YAAM;AACjB,YAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AACnB,eAAG,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,CAAA;SACxC,MAAQ;AACL,wCAAW,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;SAChC;KACJ,CAAC,CAAA;CACL","file":"checkRegisterFields.js","sourcesContent":["/**\r\n * Created by eugene on 08/05/17.\r\n */\r\n\r\nimport { insertUser } from './../insertUser'\r\n\r\nexport function checkRegisterFields(db, data, res) {\r\n    let errors = [],\r\n        takenNameError = {\r\n            field: 'user_name',\r\n            text: 'Sorry, name is already taken'\r\n        },\r\n        takenEmailError = {\r\n            field: 'user_email',\r\n            text: 'Email is already registered'\r\n        },\r\n        passwordMatchError = {\r\n            field: 'user_confirm_password',\r\n            text: \"Passwords doesn't\\ match\"\r\n        };\r\n    \r\n    let checkName = new Promise((resolve) => {\r\n        db.collection('users')\r\n            .find({\r\n                $or: [{name: data.user_name}, \r\n                      {email: data.user_email}]\r\n            })\r\n            .toArray((err, results) => {\r\n                let foundNames = results.filter(result => result.name === data.user_name).length,\r\n                    foundEmails = results.filter(result => result.email === data.user_email).length;\r\n\r\n                if (results.length !== 0) {\r\n                    (foundNames > 0) && errors.push(takenNameError);\r\n                    (foundEmails > 0) && errors.push(takenEmailError);\r\n                }\r\n                \r\n                (data.user_password !== data.user_confirm_password) && errors.push(passwordMatchError);\r\n\r\n                resolve();\r\n            });\r\n    });\r\n    \r\n    checkName.then(() => {\r\n        if (errors.length > 0) {\r\n            res.json({status: 0, errors: errors})   \r\n        }   else {\r\n            insertUser(db, data, res, 1);\r\n        }\r\n    })\r\n}\r\n"]}