{"version":3,"sources":["../../../src/actions/validation/checkLoginFields.js"],"names":[],"mappings":";;;;;;;;;;;AAIO,SAAS,gBAAgB,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;AAC5C,QAAI,MAAM,GAAG,EAAE;QACX,YAAY,GAAG;AACX,aAAK,EAAE,YAAY;AACnB,YAAI,EAAE,yBAAyB;KAClC;QACD,kBAAkB,GAAG;AACjB,aAAK,EAAE,eAAe;AACtB,YAAI,EAAE,oBAAoB;KAC7B,CAAC;;AAEN,QAAI,UAAU,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK;AACtC,UAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CACjB,IAAI,CAAC;AACF,iBAAK,EAAE,IAAI,CAAC,UAAU;SACzB,CAAC,CACD,OAAO,CAAC,UAAC,GAAG,EAAE,OAAO,EAAK;;;;AAIvB,gBAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AACpB,sBAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC1B,uBAAO,EAAE,CAAC;aACb,MAAQ;AACL,AAAC,uBAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,aAAa,IAAK,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAChF,uBAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;aACvB;SACJ,CAAC,CAAC;KACV,CAAC,CAAC;;AAEH,cAAU,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AAC1B,YAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AACnB,eAAG,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,CAAA;SACxC,MAAQ;AACL,eAAG,CAAC,IAAI,CAAC;AACL,sBAAM,EAAE,CAAC;AACT,wBAAQ,EAAE,QAAQ;aACrB,CAAC,CAAA;SACL;KACJ,CAAC,CAAA;CACL","file":"checkLoginFields.js","sourcesContent":["/**\n * Created by eugene on 08/05/17.\n */\n\nexport function checkLoginFields(db, data, res) {\n    let errors = [],\n        noEmailError = {\n            field: 'user_email',\n            text: 'Email is not registered'\n        },\n        passwordMatchError = {\n            field: 'user_password',\n            text: \"Incorrect password\"\n        };\n\n    let checkEmail = new Promise((resolve) => {\n        db.collection('users')\n            .find({\n                email: data.user_email\n            })\n            .toArray((err, results) => {\n                // let foundNames = results.filter(result => result.name === data.user_name).length,\n                    // foundEmails = results.filter(result => result.email === data.user_email).length;\n                \n                if (results.length < 1) {\n                    errors.push(noEmailError);\n                    resolve();\n                }   else {\n                    (results[0].password !== data.user_password) && errors.push(passwordMatchError);\n                    resolve(results[0]);\n                }\n            });\n    });\n\n    checkEmail.then((userInfo) => {\n        if (errors.length > 0) {\n            res.json({status: 0, errors: errors})\n        }   else {\n            res.json({\n                status: 1,\n                userInfo: userInfo\n            })\n        }\n    })\n}"]}